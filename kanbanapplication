package com.example.kanban;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.util.List;

// Classe principal
@SpringBootApplication
public class KanbanApplication {
	public static void main(String[] args) {
		SpringApplication.run(KanbanApplication.class, args);
	}
}

// Modelo de dados
@Entity
class Task {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;

	@Column(nullable = false)
	private String title;

	private String description;

	@Column(nullable = false)
	private String status = "A Fazer";

	@Column(nullable = false)
	private LocalDate createdDate = LocalDate.now();

	private String priority = "Média";

	private LocalDate deadline;

	// Getters e Setters
	public Long getId() { return id; }
	public void setId(Long id) { this.id = id; }
	public String getTitle() { return title; }
	public void setTitle(String title) { this.title = title; }
	public String getDescription() { return description; }
	public void setDescription(String description) { this.description = description; }
	public String getStatus() { return status; }
	public void setStatus(String status) { this.status = status; }
	public LocalDate getCreatedDate() { return createdDate; }
	public void setCreatedDate(LocalDate createdDate) { this.createdDate = createdDate; }
	public String getPriority() { return priority; }
	public void setPriority(String priority) { this.priority = priority; }
	public LocalDate getDeadline() { return deadline; }
	public void setDeadline(LocalDate deadline) { this.deadline = deadline; }
}

// Repositório
@Repository
interface TaskRepository extends JpaRepository<Task, Long> {}

// Serviço
@Service
class TaskService {

	@Autowired
	private TaskRepository repository;

	public Task createTask(Task task) {
		return repository.save(task);
	}

	public List<Task> getAllTasks() {
		return repository.findAll();
	}

	public Task moveTask(Long id) {
		Task task = repository.findById(id).orElseThrow(() -> new RuntimeException("Tarefa não encontrada."));
		switch (task.getStatus()) {
			case "A Fazer":
				task.setStatus("Em Progresso");
				break;
			case "Em Progresso":
				task.setStatus("Concluído");
				break;
			default:
				throw new RuntimeException("Tarefa já está na coluna 'Concluído'.");
		}
		return repository.save(task);
	}

	public Task updateTask(Long id, Task updatedTask) {
		Task task = repository.findById(id).orElseThrow(() -> new RuntimeException("Tarefa não encontrada."));
		task.setTitle(updatedTask.getTitle());
		task.setDescription(updatedTask.getDescription());
		task.setPriority(updatedTask.getPriority());
		task.setDeadline(updatedTask.getDeadline());
		return repository.save(task);
	}

	public void deleteTask(Long id) {
		repository.deleteById(id);
	}
}

// Controlador
@RestController
@RequestMapping("/tasks")
class TaskController {

	@Autowired
	private TaskService service;

	@PostMapping
	public ResponseEntity<Task> createTask(@RequestBody Task task) {
		return ResponseEntity.ok(service.createTask(task));
	}

	@GetMapping
	public ResponseEntity<List<Task>> getAllTasks() {
		return ResponseEntity.ok(service.getAllTasks());
	}

	@PutMapping("/{id}/move")
	public ResponseEntity<Task> moveTask(@PathVariable Long id) {
		return ResponseEntity.ok(service.moveTask(id));
	}

	@PutMapping("/{id}")
	public ResponseEntity<Task> updateTask(@PathVariable Long id, @RequestBody Task updatedTask) {
		return ResponseEntity.ok(service.updateTask(id, updatedTask));
	}

	@DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteTask(@PathVariable Long id) {
		service.deleteTask(id);
		return ResponseEntity.noContent().build();
	}
}
